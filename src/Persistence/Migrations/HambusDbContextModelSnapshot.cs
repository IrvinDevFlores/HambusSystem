// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

namespace Persistence.Migrations
{
    [DbContext(typeof(HambusDbContext))]
    partial class HambusDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.BussinesMovements.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Domain.Entities.BussinesMovements.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<double>("TransactionDiscount")
                        .HasColumnType("double");

                    b.Property<double>("TransactionSubtotal")
                        .HasColumnType("double");

                    b.Property<double>("TransactionTax")
                        .HasColumnType("double");

                    b.Property<double>("TransactionTotal")
                        .HasColumnType("double");

                    b.Property<DateTime>("TransctionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.BussinesMovements.TransactionDetail", b =>
                {
                    b.Property<int>("TransactionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<string>("TransactionId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double");

                    b.HasKey("TransactionDetailId");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("ProviderId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Supply", b =>
                {
                    b.Property<string>("SupplyId")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SupplyBarcode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SupplyCategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SupplyName")
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("SupplyPrice")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("SupplyStock")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("SupplyId");

                    b.HasIndex("SupplyCategoryId");

                    b.ToTable("InventorySupplies");
                });

            modelBuilder.Entity("Domain.Entities.Inventory.SupplyCategory", b =>
                {
                    b.Property<string>("SupplyCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SupplyCategoryName")
                        .HasColumnType("varchar(20)");

                    b.HasKey("SupplyCategoryId");

                    b.ToTable("InventoryCategorySupplies");
                });

            modelBuilder.Entity("Domain.Entities.Menu.MenuCategory", b =>
                {
                    b.Property<string>("MenuCategoryId")
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MenuCategoryName")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RestaurantMenuId")
                        .HasColumnType("int");

                    b.HasKey("MenuCategoryId");

                    b.HasIndex("RestaurantMenuId");

                    b.ToTable("MenuCategories");
                });

            modelBuilder.Entity("Domain.Entities.Menu.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemDescripcion")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ItemName")
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("MenuCategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("MenuItemId");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("MenuProducts");
                });

            modelBuilder.Entity("Domain.Entities.Menu.MenuItemSupplies", b =>
                {
                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<string>("SupplyId")
                        .HasColumnType("varchar(20)");

                    b.HasKey("MenuItemId", "SupplyId");

                    b.HasIndex("SupplyId");

                    b.ToTable("MenuItemSupplies");
                });

            modelBuilder.Entity("Domain.Entities.Menu.RestaurantMenu", b =>
                {
                    b.Property<int>("RestaurantMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MenuVersion")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("RestaurantMenuId");

                    b.ToTable("RestaurantMenus");
                });

            modelBuilder.Entity("Domain.Entities.Staff.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("EmployeeDayOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("EmployeePhone")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EmployeeSex")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Estado")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName1")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName2")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Puesto")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Users.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("PermissionCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PermissionName")
                        .HasColumnType("varchar(20)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Domain.Entities.Users.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(20)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Users.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserName", "EmployeeId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Users.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.BussinesMovements.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.BussinesMovements.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Provider", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ProviderId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasColumnName("City")
                                .HasColumnType("varchar(40)");

                            b1.Property<string>("Country")
                                .HasColumnName("Country")
                                .HasColumnType("varchar(40)");

                            b1.Property<string>("Department")
                                .HasColumnName("Departament")
                                .HasColumnType("varchar(40)");

                            b1.Property<string>("Street")
                                .HasColumnName("Street")
                                .HasColumnType("varchar(40)");

                            b1.Property<string>("ZipCode")
                                .HasColumnName("ZipCode")
                                .HasColumnType("varchar(40)");

                            b1.HasKey("ProviderId");

                            b1.ToTable("Providers");

                            b1.WithOwner()
                                .HasForeignKey("ProviderId");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Inventory.Supply", b =>
                {
                    b.HasOne("Domain.Entities.Inventory.SupplyCategory", "SupplyCategory")
                        .WithMany("SuppliesInCategory")
                        .HasForeignKey("SupplyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Menu.MenuCategory", b =>
                {
                    b.HasOne("Domain.Entities.Menu.RestaurantMenu", null)
                        .WithMany("Categories")
                        .HasForeignKey("RestaurantMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Menu.MenuItem", b =>
                {
                    b.HasOne("Domain.Entities.Menu.MenuCategory", "MenuCategory")
                        .WithMany("MenuProducts")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Menu.MenuItemSupplies", b =>
                {
                    b.HasOne("Domain.Entities.Menu.MenuItem", "MenuItem")
                        .WithMany("MenuItemSupplies")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Inventory.Supply", "Supply")
                        .WithMany("MenuItemSupplies")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Staff.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Users.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Users.Permission", "Permission")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.Role", "Role")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.HasOne("Domain.Entities.Staff.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Users.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Users.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
